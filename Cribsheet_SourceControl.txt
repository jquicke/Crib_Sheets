Current Version 11.17.20
Started Version 10.29.20

###Git###

git config --global alias.root 'rev-parse --show-toplevel'   -- create alias to get git root
git rm --cached <file>             -- makes git stop tracking the file completely (leaving it in the filesystem, unlike plain git rm*)
git reset HEAD <file>              -- unstages any modifications made to the file since the last commit (but doesn't revert them in the filesystem)

***Clone Remote Repository***

git clone https://github.com/alexchenuw/devopslabs             -- clones remote git repository to current directory

***/Clone Remote Repository***

***Add or Update a File***

git pull
git add <file>
git commit -m "adding foo"   or   git commit -m "adding foo" <file>
git commit -a
git pull --rebase
git push
git status

***/Add or Update a File***

***Remove File***

git rm <file to remove>
git commit -m "foo"
git pull --rebase
git push

***/Remove File***

***Get Status and Differences***

git status
git diff

***/Get Status and Differences***

***Create local repository***

mkdir /code; cd code/
ssh -T git@github.com
git clone git@github.com:jquicke/marketplace.git .
cd marketplace/
git config --global user.name "James Quicke"
git config --global user.email "jquicke@opxdev.com"
git status
git pull --rebase
git push

***/Create local repository***

***Create new repository on command line***

echo "# Non_Project_Code" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin git@github.com:jquicke/Non_Project_Code.git
git push -u origin main
                
***/Create new repository on command line***				
				
***Push existing repository from command line***

git remote add origin git@github.com:jquicke/Non_Project_Code.git
git branch -M main
git push -u origin main

***/Push existing repository from command line***

git config --global alias.root 'rev-parse --show-toplevel'   -- create alias to get git root
git rm --cached <file>             -- makes git stop tracking the file completely (leaving it in the filesystem, unlike plain git rm*)
git reset HEAD <file>              -- unstages any modifications made to the file since the last commit (but doesn't revert them in the filesystem)

***Unstage files***

git status
# On branch master
# Changes to be committed:
git reset HEAD <file>     --to unstage
git reset -q HEAD to-be-added     --new file
git reset -q HEAD to-be-modified  --modified
git reset -q HEAD to-be-removed   --removed
# or alternatively:
git reset -q HEAD to-be-added to-be-removed to-be-modified

git status
# On branch master
# Changes not staged for commit:
git add/rm <file>     --update what will be committed)
git checkout -- <file>     --discard changes in working directory)
git add and/or git commit -a       --no changes added to commit

***/Unstage files***

***Naming Best Practices***

The Root: The root should be reserved for configuration files, documentation (such as README.md and others). Also, it can contain VS solution files and git files.
/src: We all know this one. This is where all source files are placed. However, in languages that use headers (or if you have a framework for your application) don't put those files in here.
/lib, /dep, /inc etc.: This is the directory where all your dependencies should be stored. Also, if you have your project in multiple files, put your headers and attached source in here.
/doc: Documentation goes in here. For example, docs.md.
/res: A less common one. For all static resources in your project. For example, images and audio.
/tools, /scripts: Convenience directory for your use. Should contain scripts to automate tasks in the project, for example, build scripts, rename scripts. Usually contains .sh, .cmd files for example.
/build: The place where your built files will go. Usually split into two directories, Debug and Release, it can contain binaries, .DLLs and any compiled files. It may also contain build scripts, like makefiles, but they should generally be in the root.
/test: Contains unit tests... no, in fact, all tests!

mkdir /src
mkdir /lib
mkdir /dep
mkdir /inc
mkdir /doc
mkdir /res
mkdir /tools
mkdir /build
mkdir /test

***/Naming Best Practices***

###/Git###

###SVN###

SVN Notes

svn co http://zsvn/svn/src
svn update ~/depot   (where the source tree starts at)

###/SVN###